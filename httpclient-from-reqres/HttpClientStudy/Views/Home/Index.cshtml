@model IEnumerable<HttpClientStudy.Models.UserDTO>

<h1 style="text-align:center">Users form <a class="text-decoration-none" href="https://reqres.in/" target="_blank">Reqres</a></h1>

<div class="d-flex justify-content-center flex-row" style="column-gap: 50px">
    <div class="d-flex flex-column mt-3" style="row-gap: 50px">
        <div>
            <input class="form-control" type="text" placeholder="User ID" id="idInput" />
            <div class="mt-3">
                <a class="btn btn-outline-dark" style="width: 90px" onclick="getId()">Search</a>
                <a class="btn btn-outline-success" style="width: 90px" asp-action="Index">Clear</a>
            </div>
        </div>
        <div class="mt-5">
            <input class="form-control" type="text" placeholder="Name" id="nameInput" />
            <input class="form-control mt-2" type="text" placeholder="Job" id="jobInput" />
            <div class="mt-3">
                <a class="btn btn-outline-dark" style="width: 90px" onclick="sendDataToCreate()">Create</a>
            </div>
        </div>
    </div>
    <div style="width: 50%">
        <table class="table table-stripped table-hover">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Email)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First_Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Last_Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Avatar)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.First_Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Last_Name)
                        </td>
                        <td>
                            <img src="@item.Avatar" width="100px" height="100px" style="border-radius: 50%">
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="d-flex justify-content-center">
            @if(Model.Count() > 1)
            {
                <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        <li class="page-item">
                            <a class="page-link" asp-action="Pages" asp-route-rank="1">
                                <span class="sr-only">1</span>
                            </a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" asp-action="Pages" asp-route-rank="2">
                                <span class="sr-only">2</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

<script>

    function getId() {

        let value = document.getElementById("idInput").value;
        
        if(value != null){

            window.location.href = "/Home/Search?id=" + value;
        }
    }

    async function sendDataToCreate(){
        
        let nameValue = document.getElementById("nameInput").value;
        let jobValue = document.getElementById("jobInput").value;

        if(nameValue != null && jobValue != null){

            let user = {
                name: nameValue,
                job: jobValue
            };

            var jsonData = JSON.stringify(user);

            try {
                let response = await fetch("/Home/Create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: jsonData
                });

                if (response.ok) {
                    console.log("User has been created succesfully.");
                    alert("User has been created succesfully.");
                }
                else {
                    console.log("An unidentified error has occurred.");
                    alert("An unidentified error has occurred.");
                }

            } catch (error) {
                console.error("An error has occurred: ", error);
                alert("An error has occurred: ", error);
            }

            clearInputs();
        }
        else{
            alert("No fields should be left empty");
        }
    }

    function clearInputs(){

        document.getElementById("nameInput").value = "";
        document.getElementById("jobInput").value = "";
    }

</script>
